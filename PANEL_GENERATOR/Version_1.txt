const LinkPlugPair = [];
const UnLinkPlugPair = [];
let LinkLines = [];

function InitUniqueID()
{
    let TimeOfAccess = Date.now();
    sessionStorage.setItem("AccessTime", TimeOfAccess);
    sessionStorage.setItem("NumUniqueIDs", 0);
}

function CreateUniquePlugID(plugNumber, plugSide)
{
    let NumIDs = sessionStorage.getItem("NumUniqueIDs");    
    NumIDs.toString();
    plugNumber.toString();
    let IDAppend = NumIDs + plugNumber + plugSide;

    let NewNumIDs = Number(NumIDs);
    NewNumIDs += 1;
    sessionStorage.setItem("NumUniqueIDs", NewNumIDs);
    
    let AccessPoint = sessionStorage.getItem("AccessTime");
    let UniqueID = Date.now() + (Date.now() - AccessPoint);
    UniqueID.toString();
    UniqueID += IDAppend;
    
    return UniqueID;
}

function BuildPanel()
{
    let NumLeftPlugsUI = document.getElementById("LeftPlugInput");
    let NumRightPlugsUI = document.getElementById("RightPlugInput");
    if(Number.isNaN(NumLeftPlugsUI.valueAsNumber) || Number.isNaN(NumRightPlugsUI.valueAsNumber) 
                 || NumLeftPlugsUI.valueAsNumber < 1 || NumRightPlugsUI.valueAsNumber < 1)
    {
        console.log("Not valid number.");
        NumLeftPlugsUI.value = "";
        NumRightPlugsUI.value = "";
        return;
    }

    let NumLeftPlugs = NumLeftPlugsUI.valueAsNumber;
    let NumRightPlugs = NumRightPlugsUI.valueAsNumber;
    let Wrapper = document.getElementById("Wrapper");

    NumLeftPlugsUI.value = "";
    NumRightPlugsUI.value = "";

    let NewPanel = document.createElement("div");
    NewPanel.setAttribute("class", "Panel");
    NewPanel.setAttribute("id", "Panel-id");

    let NewLeftStrip = document.createElement("div");
    NewLeftStrip.setAttribute("class", "LeftStrip");
    let NewRightStrip = document.createElement("div");
    NewRightStrip.setAttribute("class", "RightStrip");

    let NewPlug;
    let UniqueID;
    while(NumLeftPlugs)
    {
        UniqueID = CreateUniquePlugID(NumLeftPlugs, "L");
        NewPlug = document.createElement("button");
        NewPlug.setAttribute("class", "Plug");
        NewPlug.setAttribute("id", UniqueID);
        NewPlug.addEventListener("click", function(e) {ClickHandler(e, this.getAttribute("id"));});
        NewPlug.setAttribute("title", "EMPTY");
        NewPlug.setAttribute("data-linkedto", "");
        NewLeftStrip.appendChild(NewPlug);
        NumLeftPlugs -= 1;
    }
    while(NumRightPlugs)
    {
        UniqueID = CreateUniquePlugID(NumRightPlugs, "R");
        NewPlug = document.createElement("button");
        NewPlug.setAttribute("class", "Plug");
        NewPlug.setAttribute("id", UniqueID);
        NewPlug.addEventListener("click", function(e) {ClickHandler(e, this.getAttribute("id"));});
        NewPlug.setAttribute("title", "EMPTY");
        NewPlug.setAttribute("data-linkedto", "");
        NewRightStrip.appendChild(NewPlug);
        NumRightPlugs -= 1;
    }

    NewPanel.appendChild(NewLeftStrip);
    NewPanel.appendChild(NewRightStrip);
    Wrapper.appendChild(NewPanel);
    BuildCanvas(NewPanel);
}

function BuildCanvas(panel)
{
    let NewCanvas = document.createElement("canvas");
    NewCanvas.setAttribute("id", CreateUniquePlugID(100, "C"));
    NewCanvas.style.position = "absolute";
    NewCanvas.width = panel.offsetWidth;
    NewCanvas.height = panel.offsetHeight;
    NewCanvas.style.zIndex = 0;

    panel.appendChild(NewCanvas);
}

function ClickHandler(clickEvent, plugID)
{
    if(!clickEvent.shiftKey)
    {
        if(UnLinkPlugPair.length > 0)
        {
            SetPlugColor(UnLinkPlugPair[0], "rgb(255, 255, 255)");
            UnLinkPlugPair.length = 0;
            return;
        }
        VerifyInputAndPush(clickEvent, plugID, LinkPlugPair);
        if(LinkPlugPair.length == 2)
        {
            LinkPlug(plugID);
        }
    }
    if(clickEvent.shiftKey)
    {
        SetPlugColor(plugID, "rgb(228, 60, 60)");
        if(LinkPlugPair.length > 0)
        {
            SetPlugEmpty(LinkPlugPair[0]);
            SetPlugEmpty(plugID);
            LinkPlugPair.length = 0;
            return;
        }
        VerifyInputAndPush(clickEvent, plugID, UnLinkPlugPair);
        if(UnLinkPlugPair.length == 2)
        {
            UnLinkPlug(plugID);
        }
    }
}

function VerifyInputAndPush(inputType, plugID, arrayToVerify)
{
    if(arrayToVerify.length > 0)
    {        
        if(arrayToVerify[0].slice(-1) == plugID.slice(-1))
        {
            return;
        }
    }
    if(arrayToVerify.length < 2)
    {
        arrayToVerify.push(plugID);        
    }
    if(!inputType.shiftKey)
    {
        SetPlugLinked(plugID);
        SetPlugColor(plugID, "rgb(110, 155, 219)");
    }
}

function SetPlugLinked(plugID)
{
    let PlugToSet = document.getElementById(plugID);
    if(PlugToSet.getAttribute("title") == "EMPTY")
        {
            let Fill = document.createElement("div");
            Fill.setAttribute("class", "Fill");
            PlugToSet.appendChild(Fill);
            PlugToSet.setAttribute("title", "LINKED");
        }
}

function SetPlugEmpty(plugID)
{
    let PlugToUnLink = document.getElementById(plugID);
    if(PlugToUnLink.getAttribute("data-linkedto") == "" && PlugToUnLink.getAttribute("title") == "LINKED")
    {
        PlugToUnLink.firstChild.remove();
        PlugToUnLink.setAttribute("title", "EMPTY");
    }
    if(PlugToUnLink.getAttribute("data-linkedto") != "" && PlugToUnLink.getAttribute("title") == "LINKED")
    {
        SetPlugColor(plugID, "rgb(255, 255, 255)");
    }
}

function SetPlugColor(plugID, color)
{
    if(document.getElementById(plugID).firstChild)
    {
        let Fill = document.getElementById(plugID).firstChild;
        Fill.style.backgroundColor = color;
    }
}

function LinkPlug(plugID)
{    
    let Plug_1 = document.getElementById(LinkPlugPair[0]);
    let Plug_2 = document.getElementById(LinkPlugPair[1]);
    let LinkList = Plug_1.getAttribute("data-linkedto");
    if(LinkList.includes(LinkPlugPair[1]))
    {
        SetPlugColor(LinkPlugPair[0], "rgb(255, 255, 255)");
        SetPlugColor(LinkPlugPair[1], "rgb(255, 255, 255)");
        LinkPlugPair.length = 0;
        return;
    }
    LinkList = LinkList + " " + LinkPlugPair[1];
    LinkList = LinkList.trim();
    
    Plug_1.setAttribute("data-linkedto", LinkList);
    LinkList = Plug_2.getAttribute("data-linkedto");
    if(LinkList.includes(LinkPlugPair[0]))
    {
        SetPlugColor(LinkPlugPair[0], "rgb(255, 255, 255)");
        SetPlugColor(LinkPlugPair[1], "rgb(255, 255, 255)");
        LinkPlugPair.length = 0;
        return;
    }
    LinkList = LinkList + " " + LinkPlugPair[0];
    LinkList = LinkList.trim();
    Plug_2.setAttribute("data-linkedto", LinkList);
    
    SetPlugColor(LinkPlugPair[0], "rgb(255, 255, 255)");
    SetPlugColor(LinkPlugPair[1], "rgb(255, 255, 255)");

    LinkLinePushCoords(LinkPlugPair[0], LinkPlugPair[1]);
    LinkLineDraw(LinkPlugPair[0]);
    LinkPlugPair.length = 0;
}

function UnLinkPlug(plugID)
{
    let Plug_1 = document.getElementById(UnLinkPlugPair[0]);
    let Plug_2 = document.getElementById(UnLinkPlugPair[1]);
    let LinkList = Plug_1.getAttribute("data-linkedto");
    if(!LinkList.includes(UnLinkPlugPair[1]))
    {
        SetPlugColor(UnLinkPlugPair[0], "rgb(255, 255, 255)");
        SetPlugColor(UnLinkPlugPair[1], "rgb(255, 255, 255)");
        UnLinkPlugPair.length = 0;
        return;
    }
    LinkList = LinkList.replace(UnLinkPlugPair[1], "");
    LinkList = LinkList.trim();
    Plug_1.setAttribute("data-linkedto", LinkList);
    SetPlugEmpty(UnLinkPlugPair[0]);
    
    LinkList = Plug_2.getAttribute("data-linkedto");
    if(!LinkList.includes(UnLinkPlugPair[0]))
    {
        SetPlugColor(UnLinkPlugPair[0], "rgb(255, 255, 255)");
        SetPlugColor(UnLinkPlugPair[1], "rbg(255, 255, 255)");
        UnLinkPlugPair.length = 0;
        return;
    }
    LinkList = LinkList.replace(UnLinkPlugPair[0], "");
    LinkList = LinkList.trim();
    Plug_2.setAttribute("data-linkedto", LinkList);
    SetPlugEmpty(UnLinkPlugPair[1]);

    LinkLinePullCoords(UnLinkPlugPair[0], UnLinkPlugPair[1]);
    LinkLineDraw(UnLinkPlugPair[0]);
    UnLinkPlugPair.length = 0;
}

function OrganizePlugLayout(plugID_1, plugID_2, condition)
{
    if(plugID_1.slice(plugID_1.length - 1) == condition)
    {
        return plugID_1;
    }
    return plugID_2;
}

function LinkLinePushCoords(PlugID_1, PlugID_2)
{
    StartPlugID = OrganizePlugLayout(PlugID_1, PlugID_2, "L");
    EndPlugID = OrganizePlugLayout(PlugID_1, PlugID_2, "R");

    let LineCoords = {};
    let StartPlug = document.getElementById(StartPlugID);
    let EndPlug = document.getElementById(EndPlugID);

    let StartStrip = StartPlug.parentElement;
    let EndStrip = EndPlug.parentElement;

    let StartPlugCoords = StartPlug.getBoundingClientRect();
    LineCoords.startPlug = StartPlugID;
    LineCoords.startX = StartStrip.offsetLeft + (StartPlugCoords.right - StartPlugCoords.left)/2;
    LineCoords.startY = 4 + StartPlug.offsetTop + (StartPlugCoords.bottom - StartPlugCoords.top)/2;

    let EndPlugCoords = StartPlug.getBoundingClientRect();
    LineCoords.endPlug = EndPlugID;
    LineCoords.endX = EndStrip.offsetLeft + (EndPlugCoords.right - EndPlugCoords.left)/2;
    LineCoords.endY = 4 + EndPlug.offsetTop + (EndPlugCoords.bottom - EndPlugCoords.top)/2;

    LinkLines.push(LineCoords);
}

function LinkLinePullCoords(plugID_1, plugID_2)
{
    if(LinkLines.length == 1)
    {
        LinkLines.length = 0;
        return;
    }
    else
    {
        startPlugID = OrganizePlugLayout(plugID_1, plugID_2, "L");
        endPlugID = OrganizePlugLayout(plugID_1, plugID_2, "R");

        for(let i = 0; i < LinkLines.length; i++)
        {
            if(LinkLines[i].startPlug.includes(startPlugID) && LinkLines[i].endPlug.includes(endPlugID))
            {
                if(i == 0)
                {
                    LinkLines.shift();
                    return;
                }
                if(i == LinkLines.length - 1)
                {
                    LinkLines.pop();
                    return;
                }
                LinkLines.splice(i, 1);
                return;
            }
        }
    }
}

function LinkLineDraw(plugID)
{
    let StartPlug = document.getElementById(plugID);
    let Panel = StartPlug.parentElement.parentElement;
    let Canvas = Panel.lastChild;
    if(!Canvas.getContext)
    {
        console.log("No Context");
        return;
    }
    CurrentContext = Canvas.getContext("2d");
    CurrentContext.clearRect(0, 0, Canvas.width, Canvas.height);

    if(LinkLines.length > 0)
    {
        for(let i = 0; i < LinkLines.length; i++)
        {
            CurrentContext.beginPath();
            CurrentContext.moveTo(LinkLines[i].startX, LinkLines[i].startY);
            CurrentContext.bezierCurveTo(LinkLines[i].startX + 140, LinkLines[i].startY, LinkLines[i].endX - 140, LinkLines[i].endY, LinkLines[i].endX, LinkLines[i].endY);
            //CurrentContext.lineTo(LinkLines[i].endX, LinkLines[i].endY);
            CurrentContext.strokeStyle = "rgb(255, 255, 255)";
            CurrentContext.lineWidth = 2
            CurrentContext.stroke();
        }
    }
}